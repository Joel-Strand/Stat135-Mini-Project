---
title: "Olympic Rowing Predictions"
subtitle: "Stat135 - Predicting Paris 2024 Data Challenge"
author: "Joel, Lauren, Mia, Sam"
format: pdf
---

```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(echo = TRUE, eval=F)

library(googlesheets4)
library(mosaic)
```

## Import the data
```{r}
#| label: import-data
knitr::opts_chunk$set(echo = TRUE, eval=F)

library(googlesheets4)
library(mosaic)
library(tidyverse)
olympic_dat0 <- readRDS(file=url("https://kcorreia.people.amherst.edu/Stat135/project_scull.Rds")) |>
  separate(Time, into=c("minute", "second"), sep=":", remove=F) |>
  mutate(across(c("minute", "second"), ~parse_number(.))
         , Time_Minutes = minute + (second/60)
         , RacingLine = parse_number(`Racing Line`)
         , RacingLine_f = factor(case_when(RacingLine %in% c(1,6) | is.na(RacingLine) ~ "Other"
                                    , RacingLine == 2 ~ "Lane 2"
                                    , RacingLine == 3 ~ "Lane 3 (Referent)"
                                    , RacingLine == 4 ~ "Lane 4"
                                    , RacingLine == 5 ~ "Lane 5")
                                 , levels=c("Lane 3 (Referent)", "Lane 2", "Lane 4", "Lane 5", "Other")))

# check derivation
count(olympic_dat0, RacingLine, RacingLine_f)

# check numbers in each group of new variable
count(olympic_dat0, RacingLine_f)
```

## Descriptive Statistics

```{r}
#| label: desc-stats
 
# e.g, can use tally to compute descriptive statistics for categorical variables

tally(~RacingLine, data=olympic_dat0)

# e.g., can use favstats to compute descriptive statistics for quantitative variables
favstats(~Time_Minutes, data=olympic_dat0)
favstats(~Height, data=olympic_dat0)
favstats(~Weight, data=olympic_dat0)

favstats(Time_Minutes ~ RacingLine, data = olympic_dat0)
# e.g., by group
```

## Plot(s)
gf_bar( ~ OlympicCity, data=olympic_dat0
        , ylab="Number of Athletes", xlab="Olympic City") +
  theme(axis.text.x=element_text(angle=45,hjust=1))

```{r}
#| label: plotting

# title your plot(s), keeping in mind context and language matter
# be sure to label all axes appropriately 

# see the mosaic cheatsheet, and relevant labs and problem sets for how to
# code the plot you want (using one of the gf_XX functions)
# if you're still stuck or have a question about a particular aspect of the plot,
# come talk to me - I can help you!

gf_boxplot(Time_Minutes ~ as.factor(RacingLine), data = olympic_dat0
           , xlab="Lane"
           , ylab="Time (minutes)"
           , title="Time verses Lane") 
#scatterplots show no concerning features so we can assume linearity for the regression model
gf_point(Time_Minutes ~ Height, data=olympic_dat0) %>% gf_lm(size=1.5,linetype="dashed")
gf_point(Time_Minutes ~ Weight, data=olympic_dat0) %>% gf_lm(size=1.5,linetype="dashed")
```


## Multiple Linear Regression Model 

```{r}
#| label: mlr

# include the code to fit your multiple linear regression model 
# including any checks for relevant assumptions
# and any inferential procedures you did 
# (e.g., hypothesis testing or confidence intervals)
# please use comments to indicate what you're doing

#Start regression to check conditions for nearly normal and equal variance
mod <- lm(Time_Minutes ~ Height + Weight, data=olympic_dat0) 
msummary(mod)

#show distribution of the residuals to check for nearly normal
gf_histogram(~resid(mod), color="black"
             , xlab="Residuals"
             , ylab="Time")

#check for equal variance
gf_point(resid(mod) ~ predict(mod), color="black"
         , xlab="Height (m)"
         , ylab="Residual (minutes)") |>
  gf_abline(intercept=0, slope=0, linetype="dashed", color="darkgrey")

#run model with racing lane
mod2 <- lm(Time_Minutes ~ Height + Weight + RacingLine, data=olympic_dat0)
msummary(mod2)

confint(mod, level=0.95)
confint(mod2, level=0.95)
```

### Prediction

```{r}
#| label: predict

# include the code to make your prediction for an athlete who
# is expected to compete in the event this summer

# Prediction for Stefanos Ntouskos

height <- 1.86 
weight <- 73

# Prediction with no Racing Line Considered
prediction_no_RL <- 9.332553 + (-0.002582 * height) + (-0.014838 * weight)

# Predictions with all Racing Lines considered
lanes <- c(1,2,3,4,5)
predictions_RL <- list()
for (lane in lanes) { # for loop for predicting each lane
  val <- 9.3356061 + (0.0001034 * height) + (-0.0194020 * weight) + (-0.0300910 * lane) # input values into model
  predictions <- c(predictions_RL, val) # store predictions in a list for later access.
}

```
